unit Monetdb;

{$R-,T-,H+,X+}
{$WARN SYMBOL_DEPRECATED OFF}

interface

uses
  system.IOUtils , System.Classes, monetdbe, vcl.Dialogs,  Data.DB, Data.SqlExpr,  Data.FMTBcd ,  System.SysUtils,
  Data.DBCommon,
  Data.DBCommonTypes,
  Data.DBXCommon,
  vcl.ComCtrls ,     Windows,
  System.Generics.Collections, designintf;

type
   //DONE :monetdbe_version              (): PUTF8Char;
   //TODO :monetdbe_open                 (db: Pmonetdbe_database; url: PUTF8Char; opts: Pmonetdbe_options): Integer; cdecl;
   //TODO :monetdbe_close                (db: monetdbe_database): Integer; cdecl;
   //TODO :monetdbe_error                (db: monetdbe_database): PUTF8Char; cdecl;
   //TODO :monetdbe_get_autocommit       (dbhdl: monetdbe_database; result: PInteger): PUTF8Char; cdecl;
   //TODO :monetdbe_set_autocommit       (dbhdl: monetdbe_database; value: Integer): PUTF8Char; cdecl;
   //TODO :monetdbe_in_transaction       (dbhdl: monetdbe_database): Integer; cdecl;
   //TODO :monetdbe_query                (dbhdl: monetdbe_database; query: PUTF8Char; result: PPmonetdbe_result; affected_rows: Pmonetdbe_cnt): PUTF8Char; cdecl;
   //TODO :monetdbe_result_fetch         (mres: Pmonetdbe_result; res: PPmonetdbe_column; column_index: NativeUInt): PUTF8Char; cdecl;
   //TODO :monetdbe_cleanup_result       (dbhdl: monetdbe_database; result: Pmonetdbe_result): PUTF8Char; cdecl;
   //TODO :monetdbe_prepare              (dbhdl: monetdbe_database; query: PUTF8Char; stmt: PPmonetdbe_statement; result: PPmonetdbe_result): PUTF8Char; cdecl;
   //TODO :monetdbe_bind                 (stmt: Pmonetdbe_statement; data: Pointer; parameter_nr: NativeUInt): PUTF8Char; cdecl;
   //TODO :monetdbe_execute              (stmt: Pmonetdbe_statement; result: PPmonetdbe_result; affected_rows: Pmonetdbe_cnt): PUTF8Char; cdecl;
   //TODO :monetdbe_cleanup_statement    (dbhdl: monetdbe_database; stmt: Pmonetdbe_statement): PUTF8Char; cdecl;
   //TODO :monetdbe_append               (dbhdl: monetdbe_database; const schema: PUTF8Char; const table: PUTF8Char; input: PPmonetdbe_column; column_count: NativeUInt): PUTF8Char; cdecl;
   //TODO :monetdbe_null                 (dbhdl: monetdbe_database; t: monetdbe_types): Pointer; cdecl;
   //TODO :monetdbe_get_columns          (dbhdl: monetdbe_database; const schema_name: PUTF8Char; const table_name: PUTF8Char; column_count: PNativeUInt; columns: PPmonetdbe_column): PUTF8Char; cdecl;
   //TODO :monetdbe_dump_database        (dbhdl: monetdbe_database; const backupfile: PUTF8Char): PUTF8Char; cdecl;
   //TODO :monetdbe_dump_table           (dbhdl: monetdbe_database; const schema_name: PUTF8Char; const table_name: PUTF8Char; const backupfile: PUTF8Char): PUTF8Char; cdecl;
   //TODO :monetdbe_get_mapi_port        (): PUTF8Char; cdecl;
   //TODO :monetdbe_mapi_dump_database   (dbhdl: monetdbe_database; const filename: PUTF8Char): PUTF8Char; cdecl;
   //TODO :monetdbe_mapi_dump_table      (dbhdl: monetdbe_database; const sname: PUTF8Char; const tname: PUTF8Char; const filename: PUTF8Char): PUTF8Char; cdecl;
   //TODO :monetdbe_mapi_error           (mid: monetdbe_Mapi): monetdbe_MapiMsg; cdecl;
   //TODO :monetdbe_mapi_query           (mid: monetdbe_Mapi; const query: PUTF8Char): monetdbe_MapiHdl; cdecl;
   //TODO :monetdbe_mapi_close_handle    (hdl: monetdbe_MapiHdl): monetdbe_MapiMsg; cdecl;
   //TODO :monetdbe_mapi_fetch_row       (hdl: monetdbe_MapiHdl): Integer; cdecl;
   //TODO :monetdbe_mapi_fetch_field     (hdl: monetdbe_MapiHdl; fnr: Integer): PUTF8Char; cdecl;
   //TODO :monetdbe_mapi_get_type        (hdl: monetdbe_MapiHdl; fnr: Integer): PUTF8Char; cdecl;
   //TODO :monetdbe_mapi_seek_row        (hdl: monetdbe_MapiHdl; rowne: Int64; whence: Integer): monetdbe_MapiMsg; cdecl;
   //TODO :monetdbe_mapi_get_row_count   (hdl: monetdbe_MapiHdl): Int64; cdecl;
   //TODO :monetdbe_mapi_rows_affected   (hdl: monetdbe_MapiHdl): Int64; cdecl;
   //TODO :monetdbe_mapi_get_field_count (hdl: monetdbe_MapiHdl): Integer; cdecl;
   //TODO :monetdbe_mapi_result_error    (hdl: monetdbe_MapiHdl): PUTF8Char; cdecl;
   //TODO :monetdbe_mapi_get_len         (hdl: monetdbe_MapiHdl; fnr: Integer): Integer; cdecl;
   //TODO :monetdbe_mapi_explain        (mid: monetdbe_Mapi; fd: PInteger); cdecl;
   //TODO :monetdbe_mapi_explain_query  (hdl: monetdbe_MapiHdl; fd: PInteger); cdecl;
   //TODO :monetdbe_mapi_explain_result (hdl: monetdbe_MapiHdl; fd: PInteger); cdecl;


  TMonetOption = (scoExplicitConnect, scoApplyUpdatesChecksRowsAffected);
  TMonetOptions = Set of TMonetOption;

  TMonetdbConnection = class(TComponent)
  private
    { Private declarations }
       LibraryHandle : THandle;
      FLibraryLoaded : boolean;

    flibrarylocation : TFileName;
           f_db_path : string;
            fOptions : TMonetOptions;
          fconnected : boolean;
   fmonetdbe_options : tmonetdbe_options;
    function LoadLibrary:boolean;
    procedure FreeLibrary;
    procedure fsetconnect(value:boolean);
    procedure setLibraryLocation(value:tfilename);
    function fgetMonetVersion:ansiChar;
  protected
    { Protected declarations }
  public
    { Public declarations }
  published
    { Published declarations }

    // database


    property monetdbe_options : TMonetdbe_options read fmonetdbe_options write fmonetdbe_options;

    property connected       : boolean       read fconnected       write fsetconnect ;
    property librarylocation : tFileName     read flibrarylocation write setlibrarylocation;
    property DB_path         : string        read f_db_path        write f_db_path;
    property Options         : TMonetOptions read fOptions         write fOptions;
    property Version         : ansiChar      read fgetMonetVersion;
  end;


  TMonetDBQuery = class(tcomponent)
    private
      FSQL :tstringlist;
      fMonetDBConnection:tmonetdbConnection;
      procedure SetSQL(value:tstringlist);
      function GetSQL:tstringlist;
    public
      constructor Create(AOwner: TComponent);
      destructor destroy;
    published
      property Connection : TMonetDBConnection read fMonetDBConnection write fMonetDBConnection;
      property SQL: TStringlist read GetSQL write setsql;




  end;

procedure Register;

implementation



procedure Register;
begin
  RegisterComponents('MonetDB', [TMonetDBConnection, TMonetDBQuery]);

end;

{ TMonetdb }

constructor TMonetDBQuery.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
 // FCommandType := ctQuery;
  FSQL := TStringList.Create;
//  FGetMetaData := False;
//  TStringList(SQL).OnChange := QueryChanged;
end;

destructor TMonetDBQuery.Destroy;
begin
  FSQL.Free;
  inherited Destroy;
end;

function TMonetDBQuery.GetSQL: tstringlist;
begin
  if assigned(FSQL)=false
    then FSQL:=tstringlist.create;
  result:=FSQL;
end;

procedure TMonetDBQuery.SetSQL(Value: TStringlist);
begin
  FSQL.Assign( value )   ;
end;

function TMonetdbConnection.fgetMonetVersion: ansiChar;
var
  ver : pansichar;
begin
     ver := monetdbe.monetdbe_version;
  result := ver^;
end;

procedure TMonetdbConnection.FreeLibrary;
begin

end;

procedure TMonetdbConnection.fsetconnect(value: boolean);
begin
  fconnected := value;


  //todo:fsetconnect
end;

function TMonetdbConnection.LoadLibrary: boolean;
var newpath : String;
begin
  if self.FLibraryLoaded then
    self.FreeLibrary;

  FLibraryLoaded := False;
          Result := False;
         newpath := ExtractFilePath( flibrarylocation );
  {$IF declared(LoadLibraryEx)}
    If newpath <> ''
      Then LibraryHandle := LoadLibraryEx(PChar(ExpandFileName(flibraryLocation)), 0, LOAD_WITH_ALTERED_SEARCH_PATH)
      Else LibraryHandle := LoadLibraryEx(PChar(flibraryLocation), 0, 0);
  {$ELSE !LoadLibraryEx}
    LibraryHandle := LoadLibrary(PChar(flibaryLocation));
  {$IFEND !LoadLibraryEx}

  {$IF not declared(LoadLibraryEx)}
    // AB modif BEGIN
    finally
      {$IFDEF WINDOWS}
      if temp<>'' then
        SetCurrentDir(temp);
      {$ENDIF}
    end;
  {$IFEND !LoadLibraryEx}

  if (LibraryHandle <> INVALID_HANDLE_VALUE) and (libraryHandle <> 0) then  begin
    FLibraryLoaded := True;
    Result := True;
  end;
end;

procedure TMonetdbConnection.setLibraryLocation(value: tfilename);
var
  FileDialog: TOpenDialog;
  ftitem:tfiletypeitem;
begin
  if self.flibrarylocation  <> Value then
  begin
    FileDialog := TOpenDialog.Create(nil);
    try
      FileDialog.Filter:='DLL|*.dll';
      FileDialog.FilterIndex := 1;
      if FileDialog.Execute then
      begin
        FLibrarylocation := FileDialog.FileName;
      end;
    finally
      FileDialog.Free;
    end;
  end;
end;


end.
